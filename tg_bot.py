import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging
import asyncio
import asyncpg
import re  # –î–æ–¥–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–¥—Ä–µ—Å –≥–∞–º–∞–Ω—Ü—ñ–≤

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# Telegram bot token
API_TOKEN = '7262008673:AAG3sP9XN2q4oVAGRz4TnKbt7N3rZiMqD6k'  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DB_CONFIG = {
    'user': 'mycomp1',
    'password': 'Matrix89',
    'database': 'matrix89',
    'host': '127.0.0.1',
    'port': 5432,
}

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
CHANNELS = [
    '@Vexelman_W3B', '@W3B_Digest', '@W3B_Education', '@vexel_token', 
    '@W3B_Events', '@W3B_Signals', '@W3B_RWA_RealWorldAssets', '@w3b_otc', 
    '@W3B_Invest', '@w3b_farm', '@W3B_Charity', '@W3B_Ventures', 
    '@crypto_liquid_loan', '@W3B_Games', '@W3B_Selection', '@crypto_scam_detect', 
    '@W3B_Algo'
]


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
daily_button = InlineKeyboardButton(text='üéÅ DAILY', callback_data='daily')
referral_button = InlineKeyboardButton(text='üë• –†–µ—Ñ–µ—Ä–∞–ª–∏', callback_data='referrals')
wallet_button = InlineKeyboardButton(text='üëõ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è', callback_data='wallet')
tasks_button = InlineKeyboardButton(text='üìã –ó–∞–≤–¥–∞–Ω–Ω—è', callback_data='tasks')  # –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ "–ó–∞–≤–¥–∞–Ω–Ω—è"

main_menu = InlineKeyboardMarkup(inline_keyboard=[[daily_button], [referral_button], [wallet_button], [tasks_button]])

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∑ –≤–∫–ª–∞–¥–∫–∏ "–ó–∞–≤–¥–∞–Ω–Ω—è"
back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='back_to_main')
tasks_menu = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

# –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, —Ç–µ–∫—Å—Ç—É —ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_messages = {}  # {'user_id': {'current': <message_id>, 'previous': <message_id>, 'text': <text>, 'markup': <markup>}}

async def create_pool():
    return await asyncpg.create_pool(**DB_CONFIG)

async def add_user(pool, user_id, referrer_id=None):
    async with pool.acquire() as connection:
        await connection.execute("""
            INSERT INTO users (user_id, last_claim, streak, balance, referrals, referrer_id, referral_bonus, wallet)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
            ON CONFLICT (user_id) DO NOTHING
        """, int(user_id), datetime.now() - timedelta(days=1), 0, 0, 0, int(referrer_id) if referrer_id else None, 0, None)

async def get_user(pool, user_id):
    async with pool.acquire() as connection:
        return await connection.fetchrow(
            "SELECT last_claim, streak, balance, referrals, referrer_id, referral_bonus, wallet FROM users WHERE user_id = $1",
            int(user_id)
        )

async def update_user(pool, user_id, last_claim=None, streak=None, balance=None, referrals=None, referral_bonus=None, wallet=None):
    async with pool.acquire() as connection:
        query = "UPDATE users SET"
        params = []
        counter = 1

        if last_claim is not None:
            query += f" last_claim = ${counter},"
            params.append(last_claim)
            counter += 1
        if streak is not None:
            query += f" streak = ${counter},"
            params.append(int(streak))
            counter += 1
        if balance is not None:
            query += f" balance = ${counter},"
            params.append(float(balance))
            counter += 1
        if referrals is not None:
            query += f" referrals = ${counter},"
            params.append(int(referrals))
            counter += 1
        if referral_bonus is not None:
            query += f" referral_bonus = ${counter},"
            params.append(float(referral_bonus))
            counter += 1
        if wallet is not None:
            query += f" wallet = ${counter},"
            params.append(wallet)
            counter += 1

        query = query.rstrip(",")
        query += f" WHERE user_id = ${counter}"
        params.append(int(user_id))

        await connection.execute(query, *params)

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
def generate_referral_link(user_id):
    return f"https://t.me/VEXELtokenbot?start={user_id}"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ TON –≥–∞–º–∞–Ω—Ü—è
def validate_wallet(wallet_address):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–ª—è TON-–∞–¥—Ä–µ—Å, —â–æ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 'EQ', 'UQ', –∞–±–æ —ñ–Ω—à–∏—Ö –≤–∞—Ä—ñ–∞—Ü—ñ–π —ñ –º–∞—é—Ç—å 48 —Å–∏–º–≤–æ–ª—ñ–≤
    return bool(re.match(r'^[A-Za-z0-9_-]{48}$', wallet_address))

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –π–æ–≥–æ –∑–º—ñ—Å—Ç –∞–±–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑–º—ñ–Ω—é—é—Ç—å—Å—è
async def edit_message_if_changed(chat_id, message_id, new_text, new_markup):
    user_data = user_messages.get(chat_id, {})
    current_text = user_data.get("text", "")
    current_markup = user_data.get("markup", None)

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–º—ñ–Ω—é—î—Ç—å—Å—è —Ç–µ–∫—Å—Ç –∞–±–æ —Ä–æ–∑–º—ñ—Ç–∫–∞
    if current_text != new_text or current_markup != new_markup:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=new_text,
            parse_mode='Markdown',
            reply_markup=new_markup
        )
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ user_messages –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        user_data["text"] = new_text
        user_data["markup"] = new_markup

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏
async def is_user_subscribed(user_id):
    subscribed_to_all = True
    for channel in CHANNELS:
        try:
            chat_member = await bot.get_chat_member(chat_id=channel, user_id=user_id)
            if chat_member.status not in ['member', 'administrator', 'creator']:
                subscribed_to_all = False
                break
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª—É {channel}: {e}")
            subscribed_to_all = False
            break

    # –ü—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—ñ
    pool = await create_pool()
    async with pool.acquire() as connection:
        await connection.execute(
            "UPDATE users SET is_subscribed = $1 WHERE user_id = $2",
            subscribed_to_all, user_id
        )
    await pool.close()

    return subscribed_to_all

# –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–ø–∏—Å–∫–∏
async def update_subscription_status(user_id):
    is_subscribed = await is_user_subscribed(user_id)
    pool = await create_pool()
    async with pool.acquire() as connection:
        await connection.execute(
            "UPDATE users SET is_subscribed = $1 WHERE user_id = $2",
            is_subscribed, user_id
        )
    await pool.close()

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥—Ä—É–ø, –¥–µ –±–æ—Ç –¥–æ–¥–∞–Ω–∏–π
async def check_group_presence():
    group_list = []
    for group_name in CHANNELS:
        try:
            chat = await bot.get_chat(group_name)
            group_list.append(chat)
        except Exception as e:
            logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≥—Ä—É–ø—É {group_name}: {e}")
    return group_list

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–µ–≤–Ω–∏—Ö –Ω–∞–∑–≤
async def check_group_for_name(target_names):
    group_list = await check_group_presence()
    found_groups = []

    for group in group_list:
        for name in target_names:
            if name.lower() in group.title.lower():
                found_groups.append(group.title)
    
    if found_groups:
        logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–∏: {', '.join(found_groups)}")
    else:
        logging.info("–ñ–æ–¥–Ω–æ—ó –∑ –≤–∫–∞–∑–∞–Ω–∏—Ö –Ω–∞–∑–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    return found_groups

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /check_names
@dp.message(F.text.startswith('/check_names'))
async def check_names_in_groups(message: types.Message):
    target_names = ['W3B | Chat', 'Vexelman | W3B üíπ', 'W3B | Digest', 'W3B | Education', '$VEXEL', 'W3B | Charity', 'Crypto Credit | Liquid Loan', 'W3B | Games', 'W3B | Investment', 'W3B | Signals', 'W3B | Algotrading', 'OTCüí±P2P', 'W3B | Ventures', 'W3B | Real World Assets', 'W3B | Events', 'W3B | Selection', '‚õîÔ∏èS–°–ê–ú Detect', 'W3B | Mining + Farming']  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –Ω–∞–∑–≤–∏
    found_groups = await check_group_for_name(target_names)
    
    if found_groups:
        await message.answer(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–∏ –∑ –≤–∞—à–∏–º–∏ –Ω–∞–∑–≤–∞–º–∏: {', '.join(found_groups)}")
    else:
        await message.answer("–ñ–æ–¥–Ω–æ—ó –∑ –≤–∫–∞–∑–∞–Ω–∏—Ö –Ω–∞–∑–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(F.text.startswith('/start'))
async def start(message: types.Message):
    pool = await create_pool()
    user_id = message.from_user.id
    referrer_id = None

    if len(message.text.split()) > 1:
        referrer_id = int(message.text.split()[1])  # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π ID

    existing_user = await get_user(pool, user_id)
    if existing_user is None:
        await add_user(pool, user_id, referrer_id)
        if referrer_id:
            referrer = await get_user(pool, referrer_id)
            if referrer:
                new_balance = referrer['balance'] + 10000  # –ù–∞—Ä–∞—Ö–æ–≤—É—î–º–æ –±–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                new_referrals = referrer['referrals'] + 1
                new_referral_bonus = referrer['referral_bonus'] + 10000
                await update_user(pool, referrer_id, balance=new_balance, referrals=new_referrals, referral_bonus=new_referral_bonus)

    await pool.close()

    response_text = "üëã –ü—Ä–∏–≤—ñ—Ç! \nüéÅ –ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É 'DAILY' —ñ –∑–±–∏—Ä–∞–π —Å–≤–æ—ó –Ω–∞–≥–æ—Ä–æ–¥–∏ —â–æ–¥–Ω—è! üí∞"
    welcome_message = await message.answer(response_text, reply_markup=main_menu)

    user_messages[user_id] = {
        "current": welcome_message.message_id, 
        "previous": None, 
        "text": response_text, 
        "markup": main_menu
    }

@dp.callback_query(F.data == 'daily')
async def daily_claim(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    pool = await create_pool()
    user = await get_user(pool, user_id)

    if user:
        last_claim, streak, balance = user['last_claim'], user['streak'], user['balance']
        now = datetime.now()

        if now - last_claim < timedelta(hours=24):
            response_text = f"‚ö†Ô∏è –¢–∏ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–≤ —Å–≤–æ—é –Ω–∞–≥–æ—Ä–æ–¥—É —Å—å–æ–≥–æ–¥–Ω—ñ! üïí –ü–æ—á–µ–∫–∞–π —â–µ —Ç—Ä–æ—Ö–∏... \n\nüí∞ –¢–≤—ñ–π –ø–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Ç–æ–∫–µ–Ω—ñ–≤. \n‚è≥ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –º–æ–∂–Ω–∞ —á–µ—Ä–µ–∑ 24 –≥–æ–¥–∏–Ω–∏."
        else:
            reward = random.randint(50, 120)
            if streak == 6:
                reward *= 4
                streak = 0
                response_text = f"üéâ –£—Ä–∞! –¢–∏ –∑—ñ—Ä–≤–∞–≤ –¥–∂–µ–∫–ø–æ—Ç –Ω–∞ 7-–π –¥–µ–Ω—å! üî• –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –æ—Ç—Ä–∏–º—É—î—à –∞–∂ `{reward} —Ç–æ–∫–µ–Ω—ñ–≤!`"
            else:
                streak += 1
                response_text = f"üéÅ –©–µ –æ–¥–Ω–∞ –ø–µ—Ä–µ–º–æ–≥–∞! \n–¢–≤–æ—è —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—è –Ω–∞–≥–æ—Ä–æ–¥–∞: `{reward} —Ç–æ–∫–µ–Ω—ñ–≤!`"
            balance += reward
            await update_user(pool, user_id, last_claim=now, streak=streak, balance=balance)

        response_text += f"\n\n ü§ë –ü—Ä–æ–¥–æ–≤–∂—É–π –∑–±–∏—Ä–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ –±–æ–Ω—É—Å–∏!"

        # –î–æ–¥–∞–π—Ç–µ –±—ñ–ª—å—à–µ –ª–æ–≥—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        print(f"Editing message for user {user_id}, current_message_id: {user_messages[user_id].get('current')}")
        
        if user_id in user_messages:
            current_message_id = user_messages[user_id].get('current')
            if current_message_id:
                try:
                    await bot.edit_message_text(
                        chat_id=callback_query.message.chat.id,
                        message_id=current_message_id,
                        text=response_text,
                        reply_markup=main_menu
                    )
                except Exception as e:
                    print(f"Error editing message: {e}")

    await pool.close()



    
# –•–µ–Ω–¥–ª–µ—Ä –†–µ—Ñ–µ—Ä–∞–ª–∏üë• 
@dp.callback_query(F.data == 'referrals')
async def referral_info(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        pool = await create_pool()
        user = await get_user(pool, user_id)
        if user:
            referrals = user['referrals']
            referral_bonus = user['referral_bonus']
            referral_link = generate_referral_link(user_id)

            response_text = (
                f"üë• **–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üë§ **–ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤**: {referrals}\n"
                f"üí∏ **–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ñ–≤**: {referral_bonus} —Ç–æ–∫–µ–Ω—ñ–≤\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üîó **–¢–≤–æ—î —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è**:\n\n"
                f"{referral_link}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                f"üéØ –ó–∞–ø—Ä–æ—Å–∏ —Å–≤–æ—ó—Ö –¥—Ä—É–∑—ñ–≤ —Ç–∞ –æ—Ç—Ä–∏–º–∞–π 10,000 —Ç–æ–∫–µ–Ω—ñ–≤ –∑–∞ –∫–æ–∂–Ω–æ–≥–æ! "
                f"–Ø–∫—â–æ –≤–æ–Ω–∏ –ø–æ—á–Ω—É—Ç—å –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–∫—É 'üéÅ DAILY', —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –≤–∏–Ω–∞–≥–æ—Ä–æ–¥—É! üí∞"
            )

            back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='back_to_main')
            referral_menu = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=response_text,
                parse_mode='Markdown',
                reply_markup=referral_menu
            )

            user_messages[user_id]["previous"] = user_messages[user_id]["current"]
        await pool.close()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∫–Ω–æ–ø–∫–∏ '–†–µ—Ñ–µ—Ä–∞–ª–∏': {e}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üëõ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è'
@dp.callback_query(F.data == 'wallet')
async def wallet_connect(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    pool = await create_pool()
    user = await get_user(pool, user_id)
    wallet_address = user['wallet'] if user else None

    if wallet_address:
        response_text = (
            f"‚úÖ **–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π:**\n`{wallet_address}`\n\n"
            "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏'."
        )
        edit_button = InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å', callback_data='edit_wallet')
        back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='back_to_main')
        wallet_menu = InlineKeyboardMarkup(inline_keyboard=[[edit_button], [back_button]])
    else:
        response_text = (
            "‚ùå **–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π.**\n\n"
            "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É —Å–≤–æ–≥–æ TON –≥–∞–º–∞–Ω—Ü—è:\n"
            "`EQxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\n"
            "–∞–±–æ\n"
            "`UQxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`"
        )
        connect_button = InlineKeyboardButton(text='üîó –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å', callback_data='edit_wallet')
        back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='back_to_main')
        wallet_menu = InlineKeyboardMarkup(inline_keyboard=[[connect_button], [back_button]])

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=response_text,
        parse_mode='Markdown',
        reply_markup=wallet_menu
    )

    await pool.close()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è
@dp.callback_query(F.data == 'edit_wallet')
async def wallet_edit(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    response_text = "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É —Å–≤–æ–≥–æ TON –≥–∞–º–∞–Ω—Ü—è."
    
    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=response_text,
        parse_mode='Markdown'
    )

    user_messages[user_id] = user_messages.get(user_id, {})
    user_messages[user_id]["editing_wallet"] = True

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –≥–∞–º–∞–Ω—Ü—è
@dp.message(F.text)
async def wallet_save(message: types.Message):
    user_id = message.from_user.id
    wallet_address = message.text.strip()

    try_again_button = InlineKeyboardButton(text='üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É', callback_data='edit_wallet')
    back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='back_to_main')
    error_wallet_menu = InlineKeyboardMarkup(inline_keyboard=[[try_again_button], [back_button]])

    if user_id in user_messages and user_messages[user_id].get("editing_wallet"):
        if validate_wallet(wallet_address):
            pool = await create_pool()
            await update_user(pool, user_id, wallet=wallet_address)
            await pool.close()

            response_text = f"‚úÖ **–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å –æ–Ω–æ–≤–ª–µ–Ω–æ:**\n`{wallet_address}`"
            await message.answer(response_text, parse_mode='Markdown')

            response_text = (
                f"‚úÖ **–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π:**\n`{wallet_address}`\n\n"
                "–Ø–∫—â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏'."
            )
            edit_button = InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å', callback_data='edit_wallet')
            back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data='back_to_main')
            wallet_menu = InlineKeyboardMarkup(inline_keyboard=[[edit_button], [back_button]])

            await bot.send_message(message.chat.id, response_text, parse_mode='Markdown', reply_markup=wallet_menu)

            user_messages[user_id]["editing_wallet"] = False
        else:
            response_text = (
                "‚ùå **–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∞–¥—Ä–µ—Å–∞ –≥–∞–º–∞–Ω—Ü—è.**\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∞–¥—Ä–µ—Å—É TON –≥–∞–º–∞–Ω—Ü—è.\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É' –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó —Å–ø—Ä–æ–±–∏ –∞–±–æ '–ù–∞–∑–∞–¥' –¥–ª—è –≤–∏—Ö–æ–¥—É."
            )
            await message.answer(response_text, parse_mode='Markdown', reply_markup=error_wallet_menu)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é'
@dp.callback_query(F.data == 'back_to_main')
async def back_to_main_menu(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    response_text = "üëã –ü—Ä–∏–≤—ñ—Ç! \nüéÅ –ù–∞—Ç–∏—Å–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É 'DAILY' —ñ –∑–±–∏—Ä–∞–π —Å–≤–æ—ó –Ω–∞–≥–æ—Ä–æ–¥–∏ —â–æ–¥–Ω—è! üí∞"
    
    # –û–Ω–æ–≤–ª—é—î–º–æ current ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if user_id in user_messages:
        user_messages[user_id]["previous"] = user_messages[user_id]["current"]
        user_messages[user_id]["current"] = callback_query.message.message_id

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=response_text,
        reply_markup=main_menu
    )



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ 'üìã –ó–∞–≤–¥–∞–Ω–Ω—è'
@dp.callback_query(F.data == 'tasks')
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    subscribed = await is_user_subscribed(user_id)

    activity_message = (
        "üöÄ **–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º –≤—ñ–¥ –Ω–∞—à–æ–≥–æ –±–æ—Ç–∞, –±—É–¥—å—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –Ω–∞ –Ω–∞—à–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö!**\n\n"
        "–ü–∞–º‚Äô—è—Ç–∞–π—Ç–µ, –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö ‚Äî —Ü–µ –≤–∞—à —à–ª—è—Ö –¥–æ –±—ñ–ª—å—à–∏—Ö –Ω–∞–≥–æ—Ä–æ–¥:\n\n"
        "1. **–°—Ç–∞–≤—Ç–µ —Ä–µ–∞–∫—Ü—ñ—ó:** —Ä–µ–∞–≥—É–π—Ç–µ –Ω–∞ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—î—é –¥—É–º–∫–æ—é.\n"
        "2. **–ö–æ–º–µ–Ω—Ç—É–π—Ç–µ:** –∑–∞–ª–∏—à–∞–π—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø—ñ–¥ –ø–æ—Å—Ç–∞–º–∏.\n"
        "3. **–†–µ–ø–æ—Å—Ç—ñ—Ç—å:** –¥—ñ–ª—ñ—Ç—å—Å—è —Ü—ñ–∫–∞–≤–∏–º–∏ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—è–º–∏ –∑ –¥—Ä—É–∑—è–º–∏.\n\n"
        "üìä **–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?**\n\n"
        "- –í–∞—à—ñ –¥—ñ—ó –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –∑–∞—Ä–æ–±–∏—Ç–∏ –±—ñ–ª—å—à–µ —Ç–æ–∫–µ–Ω—ñ–≤.\n"
        "- –ó–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –±–æ–Ω—É—Å–∏.\n"
        "- –ú–∏ —Å–ª—ñ–¥–∫—É—î–º–æ –∑–∞ –≤–∞—à–∏–º –∞–∫—Ç–∏–≤–æ–º.\n\n"
        "–ß–∏–º –∞–∫—Ç–∏–≤–Ω—ñ—à—ñ –≤–∏ –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö, —Ç–∏–º –±—ñ–ª—å—à–µ –º–æ–∂–ª–∏–≤–æ—Å—Ç–µ–π –¥–ª—è –≤–∞—Å! üéâ"
    )

    if subscribed:
        response_text = "‚úÖ –í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–∞–Ω–∞–ª–∏!\n\n" + activity_message
    else:
        response_text = (
            "‚ùå –í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–∞–Ω–∞–ª–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –≤—Å—ñ –∫–∞–Ω–∞–ª–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: "
            "[–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è](https://t.me/addlist/XfraDnp2lr01Yzcy)\n\n" + activity_message
        )

    await bot.edit_message_text(
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        text=response_text,
        parse_mode='Markdown',
        reply_markup=tasks_menu
    )

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
